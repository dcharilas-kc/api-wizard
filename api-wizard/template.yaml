apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: api-template
  title: API Template
  description: A template to create APIs
spec:
  owner: user:guest
  type: service

  parameters:
    - title: API Overview
      required:
        - name
        - version
      properties:
        name:
          title: Name
          type: string
          description: The name of your API
          ui:autofocus: true
        description:
          title: Description
          type: string
          description: Describe your API
          ui:widget: textarea
          ui:options:
            rows: 3
        version:
          title: Version
          type: number
          default: 1
    - title: API Owner
      required:
        - ownerName
        - ownerEmail
      properties:
        ownerName:
          title: Owner Name
          type: string
          description: The name of the person to contact regarding this API
        ownerEmail:
          title: Owner e-mail
          type: string
          description: The e-mail of the person to contact regarding this API
    - title: Domain Model Definitions
      properties:
        title: Domain Models
        type: array
        items:
          title: Domain Model
          type: object
          properties: 
            domainModelName":
              title: Name
              type: string
            domainModelProperties:
              title: Properties
              type: array
              items:
                type: object
                properties:
                  propertyName:
                    title: Property Name
                    type: string
                  propertyValue:
                    title: Property Value
                    type: string
                    enum: [ "string", "integer", "number", "boolean", "object"]
                    enumNames: [ "Any character", "Whole Number", "Decimal Number", "True/False", "Another Domain Model" ]
                dependencies:
                  propertyValue:
                    oneOf:
                      - properties: 
                          propertyValue:
                            enum : [ "string" ]
                          stringFormat: 
                            title: "Value Format"
                            type: "string"
                            enum: ["byte", "binary", "date", "date-time", "password"]
                            enumNames: ["Base 64 encoded", "Octet String (00 FF...)", "Date (YYYY-MM-DD)", "Date and time (YYYY-MM-DD HH:MM:SS)", "Password"]
    - title: Domain Model Operations
      required: 
        - operations
      properties:
        operations:
          type: array
          items:
            type: string
            enum:
              - Create
              - Retrieve
              - Update
              - Delete
          uniqueItems: true
          ui:widet: checkboxes
    - title: Documentation
      type: object
      properties:
        documents:
          type: array
          title: Additional Documentation
          items:
            type: string
            format: data-url
        samples:
          type: array
          title: Sample requests/responses
          items:
            type: string
            format: data-url

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    - id: generate-open-api-spec
      name: Generate OpenAPI Specification
      action: fetch:template
      input:
        url: ./content
        targetPath: fetched-data
        values:
          apiName: ${{ parameters.name }}
          apiDescription: ${{ parameters.apiDescription }}
          apiContactName: ${{ parameters.ownerName }}
          apiContactEmail: ${{ parameters.ownerEmail }}
          schemas: ${{ parameters.domainModelDefinitions }}
    - id: debug-stuff
      name: Debug
      action: debug:log
      input:
        message: done
        listWorkspace: true
    